generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model CareHome {
  id         String   @id @default(uuid())
  name       String
  address    String
  totalRooms Int
  createdBy  String
  createdAt  DateTime @default(now())

  units    Unit[]
  managers Manager[]
}

model Unit {
  id         String   @id @default(uuid())
  name       String
  careHomeId String
  careHome   CareHome @relation(fields: [careHomeId], references: [id])

  teamLead      TeamLead[]
  residents     Resident[]
  supportWorker SupportWorker[]
  appoinment    Appoinment[]
  incident      Incident[]
}

model Manager {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  role      String
  photo     String?

  careHomeId String
  careHome   CareHome @relation(fields: [careHomeId], references: [id])
}

model TeamLead {
  id       String  @id @default(uuid())
  name     String
  email    String
  password String
  photo    String?
  role     Role
  gende    Gender

  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id])

  residents Resident[]
}

model SupportWorker {
  id       String  @id @default(uuid())
  name     String
  gender   Gender
  email    String
  password String
  photo    String?
  mobile   Int
  role     Role
  gende    Gender

  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id])
}

model Resident {
  id          String  @id @default(uuid())
  name        String
  dateOfBirth String
  roomNumber  Int
  nextOfKin   String
  photo       String?
  gender      Gender

  teamLeadId String
  teamLead   TeamLead @relation(fields: [teamLeadId], references: [id])

  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id])

  appoinment Appoinment[]
  incident   Incident[]
  medication Medication[]
}

model Appoinment {
  id    String   @id @default(uuid())
  where String
  date  DateTime
  time  DateTime
  with  String

  residentId String
  resident   Resident @relation(fields: [residentId], references: [id])

  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id])
}

model Incident {
  id          String   @id @default(uuid())
  status      Status
  title       String
  description String
  date        DateTime
  time        DateTime
  residentId  String
  resident    Resident @relation(fields: [residentId], references: [id])

  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id])
}

model Medication {
  id         String   @id @default(uuid())
  title      String
  time       DateTime
  residentId String
  resident   Resident @relation(fields: [residentId], references: [id])
}

enum Status {
  serious
  medium
  low
}

enum Gender {
  male
  female
  other
}

enum Role {
  teamLead
  supportWorker
}
