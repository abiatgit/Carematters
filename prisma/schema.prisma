generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  role          Role            @default(MANAGER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  unitId        String?
  unit          Unit?           @relation(fields: [unitId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  onboarded     Boolean         @default(false)
  gender        Gender?
  CareHome      CareHome[]
  messagesFrom Message[] @relation("MessageFrom")
  messagesTo   Message[] @relation("MessageTo")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String    @unique
  userId       String
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}
model Message {
  id         String   @id @default(uuid())
  text       String
  fromId     String   // sender
  toId       String   // receiver
  createdAt  DateTime @default(now())

  from       User     @relation("MessageFrom", fields: [fromId], references: [id])
  to         User     @relation("MessageTo", fields: [toId], references: [id])
}


model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId, credentialID])
}

model CareHome {
  id        String    @id @default(uuid())
  name      String
  address   String
  postcode  String
  createdBy String
  manager   User      @relation(fields: [createdBy], references: [id])
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  logo      String?

  units Unit[]
}

model Unit {
  id         String       @id @default(uuid())
  name       String
  careHomeId String
  careHome   CareHome     @relation(fields: [careHomeId], references: [id])
  staff      User[]
  residents  Resident[]
  appoinment Appoinment[]
  incident   Incident[]
  deletedAt  DateTime?
}

model Resident {
  id          String       @id @default(uuid())
  name        String
  dateOfBirth DateTime
  roomNumber  Int
  nextOfKin   String
  photo       String?
  gender      Gender
  gp          String?
  unitId      String
  unit        Unit         @relation(fields: [unitId], references: [id],onDelete: Cascade)
  appoinment  Appoinment[]
  incident    Incident[]
  medication  Medication[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
}

model Appoinment {
  id         String    @id @default(uuid())
  venue      String
  date       DateTime
  time       DateTime
  scheduledWith       String
  residentId String
  resident   Resident  @relation(fields: [residentId], references: [id],onDelete: Cascade)
  unitId     String
  unit       Unit      @relation(fields: [unitId], references: [id],onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Incident {
  id          String    @id @default(uuid())
  status      Status
  title       String
  description String
  date        DateTime
  time        DateTime
  residentId  String
  resident    Resident  @relation(fields: [residentId], references: [id])
  unitId      String
  unit        Unit      @relation(fields: [unitId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Medication {
  id         String    @id @default(uuid())
  title      String
  time       DateTime
  residentId String
  resident   Resident  @relation(fields: [residentId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

enum Status {
  serious
  medium
  low
}

enum Gender {
  male
  female
  other
}

enum Role {
  MANAGER
  TEAM_LEAD
  SUPPORT_WORKER
}
