generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  password         String?
  emailVerified    DateTime?
  role             Role            @default(MANAGER)
  image            String?
  unitId           String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  onboarded        Boolean         @default(false)
  gender           Gender?
  accounts         Account[]
  Authenticator    Authenticator[]
  CareHome         CareHome[]
  messagesSent     Message[]       @relation("MessageFrom")
  messagesReceived Message[]       @relation("MessageTo")
  sessions         Session[]
  unit             Unit?           @relation(fields: [unitId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  text      String
  fromId    String
  toId      String
  createdAt DateTime @default(now())
  from      User     @relation("MessageFrom", fields: [fromId], references: [id])
  to        User     @relation("MessageTo", fields: [toId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model CareHome {
  id        String    @id @default(uuid())
  name      String
  address   String
  createdBy String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  logo      String?
  postcode  String
  manager   User      @relation(fields: [createdBy], references: [id])
  units     Unit[]
}

model Unit {
  id          String        @id @default(uuid())
  name        String
  careHomeId  String
  deletedAt   DateTime?
  appointment Appointment[]
  incident    Incident[]
  residents   Resident[]
  careHome    CareHome      @relation(fields: [careHomeId], references: [id])
  staff       User[]
}

model Resident {
  id          String        @id @default(uuid())
  name        String
  dateOfBirth DateTime
  roomNumber  Int
  nextOfKin   String
  photo       String?
  gender      Gender
  unitId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  gp          String?
  bio         String?
  contact     String?
  appointment Appointment[]
  incident    Incident[]
  medication  Medication[]
  unit        Unit          @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model Appointment {
  id            String    @id @default(uuid())
  date          DateTime
  time          DateTime
  residentId    String
  unitId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  venue         String
  scheduledWith String
  resident      Resident  @relation(fields: [residentId], references: [id], onDelete: Cascade)
  unit          Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model Incident {
  id          String    @id @default(uuid())
  status      Status
  title       String
  description String
  date        DateTime
  time        DateTime
  residentId  String
  unitId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  resident    Resident  @relation(fields: [residentId], references: [id])
  unit        Unit      @relation(fields: [unitId], references: [id])
}

model Medication {
  id         String    @id @default(uuid())
  title      String
  time       DateTime
  residentId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  resident   Resident  @relation(fields: [residentId], references: [id])
}

enum Status {
  serious
  medium
  low
}

enum Gender {
  male
  female
  other
}

enum Role {
  MANAGER
  TEAM_LEAD
  SUPPORT_WORKER
}
